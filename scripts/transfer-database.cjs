const { createClient } = require('@supabase/supabase-js');\nconst { Pool } = require('pg');\n\n// Load environment variables\nrequire('dotenv').config();\n\n// Supabase connection details\nconst supabaseUrl = process.env.SUPABASE_URL || 'https://prwxksesdppvgjlvpemx.supabase.co';\nconst supabaseKey = process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InByd3hrc2VzZHBwdmdqbHZwZW14Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3ODY5ODAsImV4cCI6MjA2MjM2Mjk4MH0.VBR3hTNxpAYeS75HLd3yW2TtxT7gtuB4Q5rPypN8Jzk';\n\n// Local PostgreSQL connection details\nconst localDbConfig = {\n  user: process.env.LOCAL_DB_USER || 'postgres',\n  host: process.env.LOCAL_DB_HOST || 'localhost',\n  database: process.env.LOCAL_DB_NAME || 'route_schedule_sync',\n  port: process.env.LOCAL_DB_PORT || 5432,\n};\n\n// Add password only if it's not empty\nif (process.env.LOCAL_DB_PASSWORD && process.env.LOCAL_DB_PASSWORD.trim() !== '') {\n  localDbConfig.password = process.env.LOCAL_DB_PASSWORD;\n}\n\nasync function transferSchemaAndData() {\n  let supabase;\n  let localPool;\n  \n  try {\n    console.log('Connecting to Supabase...');\n    supabase = createClient(supabaseUrl, supabaseKey);\n    \n    console.log('Connecting to local PostgreSQL...');\n    localPool = new Pool(localDbConfig);\n    \n    // Test connections\n    const { error: supabaseError } = await supabase\n      .from('routes')\n      .select('count', { count: 'exact', head: true });\n    \n    if (supabaseError) throw new Error('Supabase connection failed: ' + supabaseError.message);\n    console.log('✓ Supabase connection successful');\n    \n    const localTest = await localPool.query('SELECT 1');\n    if (!localTest) throw new Error('Local PostgreSQL connection failed');\n    console.log('✓ Local PostgreSQL connection successful');\n    \n    // Get all tables from Supabase\n    const { data: tables, error: tablesError } = await supabase\n      .from('information_schema.tables')\n      .select('table_name')\n      .eq('table_schema', 'public')\n      .neq('table_name', 'migrations')\n      .neq('table_name', 'migrations_lock');\n    \n    if (tablesError) throw tablesError;\n    \n    console.log('Found tables:', tables.map(t => t.table_name));\n    \n    // Export and import each table\n    for (const table of tables) {\n      const tableName = table.table_name;\n      console.log('\\nExporting table: ' + tableName);\n      \n      // Export data from Supabase\n      const { data: tableData, error: exportError } = await supabase\n        .from(tableName)\n        .select('*');\n      \n      if (exportError) {\n        console.error('Error exporting ' + tableName + ':', exportError);\n        continue;\n      }\n      \n      if (!tableData || tableData.length === 0) {\n        console.log('No data in ' + tableName + ', skipping...');\n        continue;\n      }\n      \n      console.log('Exported ' + tableData.length + ' rows from ' + tableName);\n      \n      // Clear local table\n      await localPool.query('TRUNCATE TABLE ' + tableName + ' CASCADE');\n      console.log('Cleared local table: ' + tableName);\n      \n      // Insert data into local table\n      if (tableData.length > 0) {\n        const columns = Object.keys(tableData[0]);\n        const columnNames = columns.join(', ');\n        const placeholders = columns.map((_, i) => '$' + (i + 1)).join(', ');\n        \n        const insertQuery = 'INSERT INTO ' + tableName + ' (' + columnNames + ') VALUES (' + placeholders + ')';\n        \n        for (const row of tableData) {\n          const values = columns.map(col => row[col]);\n          await localPool.query(insertQuery, values);\n        }\n        \n        console.log('Imported ' + tableData.length + ' rows into ' + tableName);\n      }\n    }\n    \n    console.log('\\n✓ Database import completed successfully!');\n    \n    // Close connections\n    await localPool.end();\n    \n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\ntransferSchemaAndData();